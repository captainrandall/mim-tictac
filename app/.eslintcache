[{"E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\index.js":"1","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\store.js":"2","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\reducers\\main.js":"3","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\utils\\index.js":"4","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\App.jsx":"5","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\components\\ConfigureGame.jsx":"6","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\data\\sounds.js":"7","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\actions\\mainActions.js":"8","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\data\\index.js":"9","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\views\\SelectTheme.jsx":"10","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\views\\PrePairingSetup.jsx":"11","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\data\\characters.js":"12","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\data\\themes.js":"13","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\views\\Game.jsx":"14","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\views\\JoinGame.jsx":"15"},{"size":588,"mtime":1610139284050,"results":"16","hashOfConfig":"17"},{"size":344,"mtime":1610136518731,"results":"18","hashOfConfig":"17"},{"size":3265,"mtime":1611648041313,"results":"19","hashOfConfig":"17"},{"size":5242,"mtime":1611734996244,"results":"20","hashOfConfig":"17"},{"size":876,"mtime":1611485955811,"results":"21","hashOfConfig":"17"},{"size":5420,"mtime":1611734960225,"results":"22","hashOfConfig":"17"},{"size":16458,"mtime":1610138836928,"results":"23","hashOfConfig":"17"},{"size":986,"mtime":1611638343079,"results":"24","hashOfConfig":"17"},{"size":496,"mtime":1611401551597,"results":"25","hashOfConfig":"17"},{"size":2905,"mtime":1611488471548,"results":"26","hashOfConfig":"17"},{"size":3409,"mtime":1611693033865,"results":"27","hashOfConfig":"17"},{"size":606,"mtime":1611398987834,"results":"28","hashOfConfig":"17"},{"size":282,"mtime":1611399889042,"results":"29","hashOfConfig":"17"},{"size":7334,"mtime":1611782995282,"results":"30","hashOfConfig":"17"},{"size":830,"mtime":1611639617823,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"h28h3s",{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\index.js",[],["70","71"],"E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\store.js",["72"],"E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\reducers\\main.js",["73"],"E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\utils\\index.js",[],"E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\App.jsx",["74"],"E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\components\\ConfigureGame.jsx",["75","76","77","78"],"import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { sounds } from '../data/sounds';\r\nimport {\r\n  setLevelTypeAction,\r\n  updateSoundTypesAction,\r\n  setFirstMoveAction,\r\n} from '../actions/mainActions';\r\nimport { populateAllQuestions, shuffle } from '../utils';\r\n\r\nexport const ConfigureGame = ({\r\n  soundTypes: storedSoundTypes,\r\n  nextMove: storedNextMove,\r\n  // setFirstMove,\r\n  // updateSoundTypes,\r\n  // setLevelType,\r\n  levelType: storedLevelType,\r\n  rounds: storedRounds,\r\n  hostData,\r\n  onConfigReady,\r\n  onClickBack,\r\n}) => {\r\n  const [isErrorAlertOpen, setIsErrorAlertOpen] = useState(false);\r\n  const [soundTypes, setSoundTypes] = useState(storedSoundTypes || []);\r\n  const [nextMove, setNextMove] = useState(storedNextMove || 'HOST');\r\n  const [levelType, setLevelType] = useState(storedLevelType || 'WORD');\r\n  const [rounds, setRounds] = useState(\r\n    storedRounds.length\r\n      ? storedRounds\r\n      : [\r\n          {\r\n            questions: new Array(9).fill({\r\n              soundType: {},\r\n              word: '',\r\n              image: '',\r\n              completedBy: '',\r\n            }),\r\n          },\r\n        ]\r\n  );\r\n  const [name, setName] = useState(hostData.name || '');\r\n\r\n  const onSelectSound = ({ sound, position, isSelected }) => {\r\n    if (soundTypes.length < 9 || !isSelected) {\r\n      setSoundTypes(\r\n        isSelected\r\n          ? [...soundTypes, { sound, position }]\r\n          : soundTypes.filter(\r\n              (type) => type.sound !== sound || type.position !== position\r\n            )\r\n      );\r\n      setIsErrorAlertOpen(false);\r\n    } else {\r\n      setIsErrorAlertOpen(true);\r\n    }\r\n  };\r\n\r\n  const onResetConfig = () => {\r\n    setSoundTypes([]);\r\n    setNextMove('HOST');\r\n    setLevelType('WORD');\r\n    setName('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Configure</h1>\r\n      <button onClick={onClickBack}>Back</button>\r\n      <button onClick={onResetConfig}>Reset</button>\r\n      <button\r\n        onClick={() =>\r\n          onConfigReady({\r\n            soundTypes,\r\n            nextMove,\r\n            levelType,\r\n            hostData: { name },\r\n            rounds: populateAllQuestions(rounds, soundTypes),\r\n          })\r\n        }\r\n      >\r\n        Submit\r\n      </button>\r\n      <h3>Enter your name</h3>\r\n      <input value={name} onChange={(e) => setName(e.target.value)} />\r\n      <h3>Number of rounds</h3>\r\n      <input\r\n        value={rounds.length}\r\n        onChange={(e) => {\r\n          setRounds(\r\n            new Array(parseInt(e.target.value)).fill({\r\n              questions: new Array(9).fill({\r\n                soundType: {},\r\n                word: '',\r\n                image: '',\r\n                completedBy: '',\r\n              }),\r\n            })\r\n          );\r\n        }}\r\n        type=\"number\"\r\n      />\r\n      <h3>Who takes first move</h3>\r\n      <label htmlFor=\"first-move-host\">\r\n        Me\r\n        <input\r\n          checked={nextMove === 'HOST'}\r\n          type=\"checkbox\"\r\n          id=\"first-move-host\"\r\n          onChange={() => setNextMove('HOST')}\r\n        />\r\n      </label>\r\n      <label htmlFor=\"first-move-guest\">\r\n        Other player\r\n        <input\r\n          checked={nextMove === 'GUEST'}\r\n          type=\"checkbox\"\r\n          id=\"first-move-guest\"\r\n          onChange={() => setNextMove('GUEST')}\r\n        />\r\n      </label>\r\n      <h3>Select level</h3>\r\n      <div style={{ background: 'gray' }}>\r\n        <label htmlFor=\"word-level\">\r\n          Word level\r\n          <input\r\n            checked={levelType === 'WORD'}\r\n            type=\"checkbox\"\r\n            id=\"word-level\"\r\n            onChange={() => setLevelType('WORD')}\r\n          />\r\n        </label>\r\n        <label htmlFor=\"sentence-level\">\r\n          Sentence level\r\n          <input\r\n            checked={levelType === 'SENTENCE'}\r\n            type=\"checkbox\"\r\n            id=\"sentence-level\"\r\n            onChange={() => setLevelType('SENTENCE')}\r\n          />\r\n        </label>\r\n      </div>\r\n      <h3>Select sound</h3>\r\n      {isErrorAlertOpen && <h1>Oi - too many sounds</h1>}\r\n      {Object.keys(sounds).map((sound) => (\r\n        <div style={{ background: 'gray' }}>\r\n          <h3>{sound}</h3>\r\n          {Object.keys(sounds[sound]).map((position) => (\r\n            <label htmlFor={`${sound}-${position}`}>\r\n              {position}\r\n              <input\r\n                id={`${sound}-${position}`}\r\n                type=\"checkbox\"\r\n                checked={\r\n                  soundTypes.findIndex(\r\n                    (type) => type.sound === sound && type.position === position\r\n                  ) !== -1\r\n                }\r\n                onChange={(e) =>\r\n                  onSelectSound({\r\n                    sound,\r\n                    position,\r\n                    isSelected: e.target.checked,\r\n                  })\r\n                }\r\n              />\r\n            </label>\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  soundTypes: state.soundTypes,\r\n  levelType: state.levelType,\r\n  nextMove: state.nextMove,\r\n  hostData: state.hostData,\r\n  guestData: state.guestData,\r\n  rounds: state.rounds,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  // updateSoundTypes: updateSoundTypesAction,\r\n  // setLevelType: setLevelTypeAction,\r\n  // setFirstMove: setFirstMoveAction,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfigureGame);\r\n","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\data\\sounds.js",["79","80"],"\r\n\r\nexport const sounds = {\r\n  p: {\r\n    initial: [\r\n      { name: 'peas' },\r\n      { name: 'pear' },\r\n      { name: 'pig' },\r\n      { name: 'panda' },\r\n      { name: 'penguin' },\r\n      { name: 'potatoes' },\r\n      { name: 'porridge' },\r\n      { name: 'pan' },\r\n      { name: 'painting' },\r\n      { name: 'park' },\r\n      { name: 'paper' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'hippo' },\r\n      { name: 'apple' },\r\n      { name: 'puppet' },\r\n      { name: 'purple' },\r\n      { name: 'shampoo' },\r\n      { name: 'puppy' },\r\n      { name: 'happy' },\r\n      { name: 'shopping' },\r\n      { name: 'hopping' },\r\n      { name: 'saucepan' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'soap' },\r\n      { name: 'sheep' },\r\n      { name: 'soup' },\r\n      { name: 'stop' },\r\n      { name: 'up' },\r\n      { name: 'cup' },\r\n      { name: 'map' },\r\n      { name: 'help' },\r\n      { name: 'ship' },\r\n      { name: 'zip' },\r\n    ],\r\n  },\r\n\r\n  b: {\r\n    initial: [\r\n      { name: 'ball' },\r\n      { name: 'bug' },\r\n      { name: 'bed' },\r\n      { name: 'bee' },\r\n      { name: 'birthday' },\r\n      { name: 'bath' },\r\n      { name: 'boat' },\r\n      { name: 'bottle' },\r\n      { name: 'boy' },\r\n      { name: 'button' },\r\n      { name: 'bananna' },\r\n      { name: 'bike' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'robot' },\r\n      { name: 'baby' },\r\n      { name: 'ladybird' },\r\n      { name: 'ribbon' },\r\n      { name: 'rabbit' },\r\n      { name: 'goodbye' },\r\n      { name: 'robin' },\r\n      { name: 'rubber' },\r\n      { name: 'cobweb' },\r\n      { name: 'strawberries' },\r\n      { name: 'cheeseburger' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'crab' },\r\n      { name: 'globe' },\r\n      { name: 'web' },\r\n      { name: 'icecube' },\r\n      { name: 'job' },\r\n      { name: 'club' },\r\n      { name: 'doorknob' },\r\n      { name: 'bob' },\r\n      { name: 'lightbulb' },\r\n    ],\r\n  },\r\n\r\n  t: {\r\n    initial: [\r\n      { name: 'tea' },\r\n      { name: 'television' },\r\n      { name: 'toes' },\r\n      { name: 'turtle' },\r\n      { name: 'tennis' },\r\n      { name: 'tomato' },\r\n      { name: 'tent' },\r\n      { name: 'table' },\r\n      { name: 'toilet' },\r\n      { name: 'time' },\r\n      { name: 'toys' },\r\n      { name: 'tiger' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'pasta' },\r\n      { name: 'docutor' },\r\n      { name: 'potato' },\r\n      { name: 'empty' },\r\n      { name: 'button' },\r\n      { name: 'football' },\r\n      { name: 'guitar' },\r\n      { name: 'lighthouse' },\r\n      { name: 'catapiller' },\r\n      { name: 'hotel' },\r\n      { name: 'painting' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'hat' },\r\n      { name: 'cat' },\r\n      { name: 'rat' },\r\n      { name: 'bat' },\r\n      { name: 'hot' },\r\n      { name: 'foot' },\r\n      { name: 'feet' },\r\n      { name: 'coat' },\r\n      { name: 'light' },\r\n      { name: 'white' },\r\n      { name: 'night' },\r\n      { name: 'rabbit' },\r\n    ],\r\n  },\r\n\r\n  d: {\r\n    initial: [\r\n      { name: 'dog' },\r\n      { name: 'donkey' },\r\n      { name: 'daisy' },\r\n      { name: 'donught' },\r\n      { name: 'dinosaur' },\r\n      { name: 'door' },\r\n      { name: 'doll' },\r\n      { name: 'clay' },\r\n      { name: 'dinner' },\r\n      { name: 'dolphin' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'candle' },\r\n      { name: 'birthday' },\r\n      { name: 'puddle' },\r\n      { name: 'panda' },\r\n      { name: 'medal' },\r\n      { name: 'spider' },\r\n      { name: 'pudding' },\r\n      { name: 'tadpole' },\r\n      { name: 'ladder' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'red' },\r\n      { name: 'food' },\r\n      { name: 'dad' },\r\n      { name: 'bed' },\r\n      { name: 'bird' },\r\n      { name: 'slide' },\r\n      { name: 'bread' },\r\n      { name: 'head' },\r\n      { name: 'lizard' },\r\n      { name: 'road' },\r\n    ],\r\n  },\r\n\r\n  c: {\r\n    initial: [\r\n      { name: 'cat' },\r\n      { name: 'carrot' },\r\n      { name: 'comb' },\r\n      { name: 'cow' },\r\n      { name: 'castle' },\r\n      { name: 'king' },\r\n      { name: 'key' },\r\n      { name: 'cup' },\r\n      { name: 'camel' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'cookie' },\r\n      { name: 'rocket' },\r\n      { name: 'jacket' },\r\n      { name: 'donkey' },\r\n      { name: 'bucket' },\r\n      { name: 'chicken' },\r\n      { name: 'cracker' },\r\n      { name: 'necklace' },\r\n      { name: 'ticket' },\r\n      { name: 'pocket' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'book' },\r\n      { name: 'duck' },\r\n      { name: 'shark' },\r\n      { name: 'bike' },\r\n      { name: 'sock' },\r\n      { name: 'snake' },\r\n      { name: 'snack' },\r\n      { name: 'rock' },\r\n      { name: 'walk' },\r\n      { name: 'milk' },\r\n    ],\r\n  },\r\n\r\n  g: {\r\n    initial: [\r\n      { name: 'go' },\r\n      { name: 'girl' },\r\n      { name: 'goat' },\r\n      { name: 'gate' },\r\n      { name: 'game' },\r\n      { name: 'guitar' },\r\n      { name: 'goal' },\r\n      { name: 'goose' },\r\n      { name: 'goodbye' },\r\n      { name: 'golf' },\r\n      { name: 'gorilla' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'biujrger' },\r\n      { name: 'klangeroo' },\r\n      { name: 'yoghurt' },\r\n      { name: 'sugar' },\r\n      { name: 'tiger' },\r\n      { name: 'finger' },\r\n      { name: 'alligator' },\r\n      { name: 'dragon' },\r\n      { name: 'eagle' },\r\n      { name: 'magvazine' },\r\n      { name: 'seagull' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'leg' },\r\n      { name: 'bug' },\r\n      { name: 'dog' },\r\n      { name: 'bag' },\r\n      { name: 'mug' },\r\n      { name: 'frog' },\r\n      { name: 'pig' },\r\n      { name: 'log' },\r\n      { name: 'slug' },\r\n      { name: 'egg' },\r\n      { name: 'jug' },\r\n    ],\r\n  },\r\n\r\n  f: {\r\n    initial: [\r\n      { name: 'five' },\r\n      { name: 'fingers' },\r\n      { name: 'foot' },\r\n      { name: 'feet' },\r\n      { name: 'food' },\r\n      { name: 'fairy' },\r\n      { name: 'farm' },\r\n      { name: 'football' },\r\n      { name: 'fan' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'breakfast' },\r\n      { name: 'coffee' },\r\n      { name: 'elephant' },\r\n      { name: 'waffle' },\r\n      { name: 'toffee' },\r\n      { name: 'golfish' },\r\n      { name: 'sofa' },\r\n      { name: 'muffin' },\r\n      { name: 'puffin' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'girraffe' },\r\n      { name: 'leaf' },\r\n      { name: 'roof' },\r\n      { name: 'scawrf' },\r\n      { name: 'chef' },\r\n      { name: 'golf' },\r\n      { name: 'shelf' },\r\n      { name: 'wolf' },\r\n      { name: 'calf' },\r\n    ],\r\n  },\r\n\r\n  v: {\r\n    initial: [\r\n      { name: 'violin' },\r\n      { name: 'van' },\r\n      { name: 'vest' },\r\n      { name: 'vegatableds' },\r\n      { name: 'volcano' },\r\n      { name: 'village' },\r\n      { name: 'vase' },\r\n      { name: 'vet' },\r\n      { name: 'vaccumcleaner' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'driveway' },\r\n      { name: 'seven' },\r\n      { name: 'beaver' },\r\n      { name: 'diver' },\r\n      { name: 'driver' },\r\n      { name: 'envelope' },\r\n      { name: 'shaviong' },\r\n      { name: 'seventy' },\r\n      { name: 'river' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'glove' },\r\n      { name: 'olive' },\r\n      { name: 'five' },\r\n      { name: 'love' },\r\n      { name: 'cave' },\r\n      { name: 'drive' },\r\n      { name: 'wave' },\r\n      { name: 'beehive' },\r\n      { name: 'sleeve' },\r\n    ],\r\n  },\r\n\r\n  m: {\r\n    initial: [\r\n      { name: 'mouse' },\r\n      { name: 'moon' },\r\n      { name: 'monkey' },\r\n      { name: 'motorbike' },\r\n      { name: 'melon' },\r\n      { name: 'mermaid' },\r\n      { name: 'mountains' },\r\n      { name: 'milk' },\r\n      { name: 'mice' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'lemon' },\r\n      { name: 'family' },\r\n      { name: 'camera' },\r\n      { name: 'tomato' },\r\n      { name: 'animals' },\r\n      { name: 'numbers' },\r\n      { name: 'woman' },\r\n      { name: 'camel' },\r\n      { name: 'hammer' },\r\n      { name: 'christmas' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'game' },\r\n      { name: 'lamb' },\r\n      { name: 'stream' },\r\n      { name: 'thumb' },\r\n      { name: 'time' },\r\n      { name: 'farm' },\r\n      { name: 'jam' },\r\n      { name: 'drum' },\r\n      { name: 'swim' },\r\n    ],\r\n  },\r\n\r\n  n: {\r\n    initial: [\r\n      { name: 'knees' },\r\n      { name: 'nest' },\r\n      { name: 'necklace' },\r\n      { name: 'nurse' },\r\n      { name: 'nail' },\r\n      { name: 'night' },\r\n      { name: 'nine' },\r\n      { name: 'numbers' },\r\n      { name: 'northpole' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'pencil' },\r\n      { name: 'sunglasses' },\r\n      { name: 'bananna' },\r\n      { name: 'doghnut' },\r\n      { name: 'dinner' },\r\n      { name: 'planet' },\r\n      { name: 'rainbow' },\r\n      { name: 'dinosaur' },\r\n      { name: 'pineapple' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'sun' },\r\n      { name: 'van' },\r\n      { name: 'moon' },\r\n      { name: 'green' },\r\n      { name: 'spoon' },\r\n      { name: 'barn' },\r\n      { name: 'pen' },\r\n      { name: 'pan' },\r\n      { name: 'can' },\r\n      { name: 'fan' },\r\n    ],\r\n  },\r\n\r\n  ng: {\r\n    final: [\r\n      { name: 'wing' },\r\n      { name: 'ring' },\r\n      { name: 'sing' },\r\n      { name: 'king' },\r\n      { name: 'lung' },\r\n      { name: 'swing' },\r\n      { name: 'song' },\r\n      { name: 'string' },\r\n      { name: 'tongue' },\r\n    ],\r\n  },\r\n\r\n  n: {\r\n    initial: [\r\n      { name: 'sun' },\r\n      { name: 'soap' },\r\n      { name: 'soup' },\r\n      { name: 'sock' },\r\n      { name: 'seal' },\r\n      { name: 'sink' },\r\n      { name: 'saw' },\r\n      { name: 'suitcaser' },\r\n      { name: 'salt' },\r\n      { name: 'seven' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'glasses' },\r\n      { name: 'sunglasses' },\r\n      { name: 'pencil' },\r\n      { name: 'fossil' },\r\n      { name: 'insect' },\r\n      { name: 'grasshopper' },\r\n      { name: 'dinosaur' },\r\n      { name: 'bicycle' },\r\n      { name: 'policecar' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'bus' },\r\n      { name: 'face' },\r\n      { name: 'ice' },\r\n      { name: 'grass' },\r\n      { name: 'hourse' },\r\n      { name: 'nurse' },\r\n      { name: 'purse' },\r\n      { name: 'dress' },\r\n      { name: 'mouse' },\r\n      { name: 'house' },\r\n      { name: 'lettuce' },\r\n    ],\r\n  },\r\n\r\n  z: {\r\n    initial: [\r\n      { name: 'zoo' },\r\n      { name: 'zebra' },\r\n      { name: 'zero' },\r\n      { name: 'zip' },\r\n      { name: 'zookeeper' },\r\n      { name: 'xylophone' },\r\n      { name: 'zigzag' },\r\n      { name: 'zest' },\r\n      { name: 'zoom' },\r\n      { name: 'zone' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'music' },\r\n      { name: 'cheesecake' },\r\n      { name: 'wizard' },\r\n      { name: 'lizard' },\r\n      { name: 'magazine' },\r\n      { name: 'raisins' },\r\n      { name: 'scissors' },\r\n      { name: 'daisy' },\r\n      { name: 'freezer' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'cheese' },\r\n      { name: 'knees' },\r\n      { name: 'nose' },\r\n      { name: 'rose' },\r\n      { name: 'hose' },\r\n      { name: 'babies' },\r\n      { name: 'dogs' },\r\n      { name: 'bees' },\r\n      { name: 'prize' },\r\n    ],\r\n  },\r\n\r\n  l: {\r\n    initial: [\r\n      { name: 'lemon' },\r\n      { name: 'ladder' },\r\n      { name: 'ladybird' },\r\n      { name: 'lips' },\r\n      { name: 'lime' },\r\n      { name: 'lizard' },\r\n      { name: 'leap' },\r\n      { name: 'letter' },\r\n      { name: 'lunch' },\r\n      { name: 'lion' },\r\n      { name: 'lamb' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'yellow' },\r\n      { name: 'noun' },\r\n      { name: 'police' },\r\n      { name: 'volcano' },\r\n      { name: 'elephant' },\r\n      { name: 'jelly' },\r\n      { name: 'telescope' },\r\n      { name: 'eleven' },\r\n      { name: 'television' },\r\n      { name: 'balloons' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'ball' },\r\n      { name: 'nail' },\r\n      { name: 'seal' },\r\n      { name: 'pool' },\r\n      { name: 'shell' },\r\n      { name: 'tail' },\r\n      { name: 'tool' },\r\n      { name: 'bell' },\r\n      { name: 'owl' },\r\n    ],\r\n  },\r\n\r\n  w: {\r\n    initial: [\r\n      { name: 'wall' },\r\n      { name: 'water' },\r\n      { name: 'watch' },\r\n      { name: 'watefall' },\r\n      { name: 'wing' },\r\n      { name: 'window' },\r\n      { name: 'web' },\r\n      { name: 'wave' },\r\n      { name: 'white' },\r\n      { name: 'whale' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'homework' },\r\n      { name: 'micreowave' },\r\n      { name: 'fireworks' },\r\n      { name: 'sandwich' },\r\n      { name: 'seaweed' },\r\n      { name: 'shower' },\r\n      { name: 'owl' },\r\n      { name: 'halloween' },\r\n      { name: 'towel' },\r\n    ],\r\n  },\r\n\r\n  r: {\r\n    initial: [\r\n      { name: 'red' },\r\n      { name: 'rose' },\r\n      { name: 'roof' },\r\n      { name: 'rug' },\r\n      { name: 'rock' },\r\n      { name: 'radio' },\r\n      { name: 'rabbiotr' },\r\n      { name: 'rice' },\r\n      { name: 'robot' },\r\n      { name: 'rug' },\r\n      { name: 'rope' },\r\n      { name: 'rectangle' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'carrot' },\r\n      { name: 'parrot' },\r\n      { name: 'cereal' },\r\n      { name: 'squirrel' },\r\n      { name: 'blueberries' },\r\n      { name: 'strawberries' },\r\n      { name: 'blackberries' },\r\n      { name: 'camera' },\r\n      { name: 'fairy' },\r\n    ],\r\n  },\r\n\r\n  sh: {\r\n    initial: [\r\n      { name: 'shoe' },\r\n      { name: 'shut' },\r\n      { name: 'sheep' },\r\n      { name: 'ship' },\r\n      { name: 'shop' },\r\n      { name: 'shjorts' },\r\n      { name: 'shampoo' },\r\n      { name: 'shower' },\r\n      { name: 'shapes' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'cushion' },\r\n      { name: 'fishing' },\r\n      { name: 'milkshake' },\r\n      { name: 'ocean' },\r\n      { name: 'marshellows' },\r\n      { name: 'seashells' },\r\n      { name: 'tissues' },\r\n      { name: 'sunshine' },\r\n      { name: 'washingmachine' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'fish' },\r\n      { name: 'brush' },\r\n      { name: 'bush' },\r\n      { name: 'dish' },\r\n      { name: 'paintbrush' },\r\n      { name: 'toothbrush' },\r\n      { name: 'nailpolish' },\r\n      { name: 'splash' },\r\n      { name: 'hairbrush' },\r\n    ],\r\n  },\r\n\r\n  tch: {\r\n    initial: [\r\n      { name: 'cheese' },\r\n      { name: 'chair' },\r\n      { name: 'chicken' },\r\n      { name: 'chocolate' },\r\n      { name: 'chick' },\r\n      { name: 'chimes' },\r\n      { name: 'chin' },\r\n      { name: 'children' },\r\n      { name: 'chips' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'teacher' },\r\n      { name: 'kitchen' },\r\n      { name: 'ketchup' },\r\n      { name: 'lunchbox' },\r\n      { name: 'armchair' },\r\n      { name: 'marching' },\r\n      { name: 'nachos' },\r\n      { name: 'matching' },\r\n      { name: 'reaching' },\r\n      { name: 'patches' },\r\n      { name: 'catching' },\r\n      { name: 'watching' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'peach' },\r\n      { name: 'beach' },\r\n      { name: 'lunch' },\r\n      { name: 'torch' },\r\n      { name: 'coach' },\r\n      { name: 'branch' },\r\n      { name: 'bench' },\r\n      { name: 'catch' },\r\n      { name: 'match' },\r\n      { name: 'watch' },\r\n    ],\r\n  },\r\n\r\n  g: {\r\n    initial: [\r\n      { name: 'jam' },\r\n      { name: 'jar' },\r\n      { name: 'jacket' },\r\n      { name: 'jelly' },\r\n      { name: 'giraffe' },\r\n      { name: 'juice' },\r\n      { name: 'jellybeans' },\r\n      { name: 'jellyfish' },\r\n      { name: 'jigsaw' },\r\n      { name: 'jeans' },\r\n      { name: 'jupiter' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'oranges' },\r\n      { name: 'surgeon' },\r\n      { name: 'magician' },\r\n      { name: 'gingerbread' },\r\n      { name: 'sausages' },\r\n      { name: 'energy' },\r\n      { name: 'solidery' },\r\n      { name: 'magic' },\r\n      { name: 'pyjamas' },\r\n      { name: 'fireengine' },\r\n    ],\r\n\r\n    final: [\r\n      { name: 'cabbage' },\r\n      { name: 'fridge' },\r\n      { name: 'bridge' },\r\n      { name: 'orange' },\r\n      { name: 'bandage' },\r\n      { name: 'spoinge' },\r\n      { name: 'cage' },\r\n      { name: 'page' },\r\n      { name: 'garage' },\r\n    ],\r\n  },\r\n\r\n  zh: {\r\n    medial: [\r\n      { name: 'measuringtape' },\r\n      { name: 'treasure' },\r\n      { name: 'beige' },\r\n      { name: 'leisure' },\r\n      { name: 'division' },\r\n      { name: 'treasure' },\r\n      { name: 'asia' },\r\n      { name: 'measure' },\r\n      { name: 'collage' },\r\n    ],\r\n  },\r\n\r\n  h: {\r\n    initial: [\r\n      { name: 'house' },\r\n      { name: 'hat' },\r\n      { name: 'hospital' },\r\n      { name: 'hair' },\r\n      { name: 'hammer' },\r\n      { name: 'hippo' },\r\n      { name: 'hand' },\r\n      { name: 'heart' },\r\n      { name: 'horse' },\r\n      { name: 'hamster' },\r\n    ],\r\n\r\n    medial: [\r\n      { name: 'beehive' },\r\n      { name: 'birdhouse' },\r\n      { name: 'dollshouse' },\r\n      { name: 'lighthouse' },\r\n      { name: 'playhouse' },\r\n      { name: 'foprehead' },\r\n      { name: 'seahorse' },\r\n      { name: 'grasshopper' },\r\n      { name: 'superhero' },\r\n    ],\r\n  },\r\n};\r\n","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\actions\\mainActions.js",[],"E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\data\\index.js",[],["81","82"],"E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\views\\SelectTheme.jsx",["83","84"],"import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport themesData from '../data/themes';\r\nimport characters from '../data/characters';\r\nimport { pushGameUpdate, emitMessage } from '../utils';\r\nimport { setActiveViewAction } from '../actions/mainActions';\r\n\r\nexport const SelectTheme = ({\r\n  selectedTheme,\r\n  hostCharacter,\r\n  guestCharacter,\r\n  isHost,\r\n  setActiveView,\r\n}) => {\r\n  const selectedCharacter = isHost ? hostCharacter : guestCharacter;\r\n  const isAwaitingOtherPlayer = ![hostCharacter, guestCharacter].every(\r\n    (c) => c\r\n  );\r\n  const themes = ['jurassic', 'princess'];\r\n  const onSelectTheme = (theme) => pushGameUpdate({ theme });\r\n  const onSelectCharacter = (character) =>\r\n    pushGameUpdate({\r\n      [isHost ? 'hostCharacter' : 'guestCharacter']: character,\r\n    });\r\n  const onStartGame = () => {\r\n    emitMessage('START_GAME');\r\n  };\r\n\r\n  if (\r\n    selectedTheme &&\r\n    !themesData[selectedTheme].characters.find((c) => c === selectedCharacter)\r\n  ) {\r\n    pushGameUpdate({\r\n      [isHost ? 'hostCharacter' : 'guestCharacter']: null,\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    window.socket.on('START_GAME', () => setActiveView('GAME'));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {!selectedTheme && (\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n          {themes.map((theme) => (\r\n            <div onClick={() => onSelectTheme(theme)}>\r\n              <h1>{themesData[theme].label}</h1>\r\n              <img src=\"https://via.placeholder.com/350\" alt=\"\" />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {selectedTheme && !selectedCharacter && (\r\n        <>\r\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            {themesData[selectedTheme].characters.map((character) => (\r\n              <div onClick={() => onSelectCharacter(character)}>\r\n                <h3>{characters[selectedTheme][character].label}</h3>\r\n                <img src=\"https://via.placeholder.com/200\" alt=\"\" />\r\n              </div>\r\n            ))}\r\n          </div>\r\n          <button onClick={() => onSelectTheme(null)}>Go back</button>\r\n        </>\r\n      )}\r\n\r\n      {selectedCharacter && selectedTheme && (\r\n        <div>\r\n          {isAwaitingOtherPlayer && <div>Awaiting other player...</div>}\r\n          <button disabled={isAwaitingOtherPlayer} onClick={onStartGame}>\r\n            Start\r\n          </button>\r\n          <button onClick={() => onSelectCharacter(null)}>Go back</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isHost: state.isHost,\r\n  selectedTheme: state.theme,\r\n  hostCharacter: state.hostCharacter,\r\n  guestCharacter: state.guestCharacter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  setActiveView: setActiveViewAction,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectTheme);\r\n","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\views\\PrePairingSetup.jsx",["85","86","87"],"import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  setActiveViewAction,\r\n  setGameIdAction,\r\n  flushDataAction,\r\n  setIsHostAction,\r\n  setGameConfigAction,\r\n} from '../actions/mainActions';\r\nimport ConfigureGame from '../components/ConfigureGame';\r\nimport { sounds } from '../data/sounds';\r\nimport { emitMessage, getNewGameId, pushGameUpdate, shuffle } from '../utils';\r\nimport JoinGame from './JoinGame';\r\n\r\nexport const PrePairingSetup = ({\r\n  setGameId,\r\n  setActiveView,\r\n  gameId,\r\n  flushData,\r\n  setIsHost,\r\n  setGameConfig,\r\n  isHost,\r\n  levelType,\r\n  hostData,\r\n  soundTypes,\r\n  nextMove,\r\n  rounds,\r\n}) => {\r\n  const [isCreatingGame, setIsCreatingGame] = useState(false);\r\n  const [isJoiningGame, setIsJoiningGame] = useState(false);\r\n  const [isAwaitingOtherPlayer, setIsAwaitingOtherPlayer] = useState(false);\r\n\r\n  \r\n\r\n  const onRequestJoinGame = () => {\r\n    emitMessage('JOIN_GAME');\r\n  };\r\n  const onRequestNewGame = () => {\r\n    setGameId(getNewGameId());\r\n    emitMessage('NEW_GAME');\r\n  };\r\n  const onClickCreateGame = () => {\r\n    flushData();\r\n    setIsHost(true);\r\n    setIsCreatingGame(true);\r\n    setIsAwaitingOtherPlayer(false);\r\n  };\r\n  const onClickJoinGame = () => {\r\n    flushData();\r\n    setIsJoiningGame(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.socket.on('PAIRING_SUCCESS', () => {\r\n      if (isHost) {\r\n        pushGameUpdate({\r\n          levelType,\r\n          hostData,\r\n          soundTypes,\r\n          nextMove,\r\n          rounds,\r\n        });\r\n      } else {\r\n      }\r\n      setActiveView('SELECT_THEME');\r\n    });\r\n  }, [levelType, hostData, soundTypes, nextMove, rounds]);\r\n\r\n  if (!isCreatingGame && !isJoiningGame) {\r\n    return (\r\n      <div>\r\n        <h1>Landing</h1>\r\n        <button onClick={onClickCreateGame}>Create game</button>\r\n        <button onClick={onClickJoinGame}>Join Game</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (isJoiningGame) {\r\n    return (\r\n      <JoinGame\r\n        onClickConfirmJoinGame={(name) => {\r\n          onRequestJoinGame();\r\n          pushGameUpdate({ guestData: { name } });\r\n          setIsJoiningGame(false);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isCreatingGame && !isAwaitingOtherPlayer) {\r\n    return (\r\n      <ConfigureGame\r\n        onConfigReady={(config) => {\r\n          setGameConfig(config);\r\n          setIsAwaitingOtherPlayer(true);\r\n          onRequestNewGame();\r\n        }}\r\n        onClickBack={() => {\r\n          setIsCreatingGame(false);\r\n          setIsHost(false);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (isAwaitingOtherPlayer) {\r\n    return (\r\n      <div>\r\n        <h1>Awaiting player to join</h1>\r\n        <h3>Here is your code: {gameId}</h3>\r\n        <button onClick={() => setIsAwaitingOtherPlayer(false)}>Back</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return <div>error</div>;\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isPaired: state.isPared,\r\n  isHost: state.isHost,\r\n  gameId: state.gameId,\r\n  hostData: state.hostData,\r\n  soundTypes: state.soundTypes,\r\n  levelType: state.levelType,\r\n  rounds: state.rounds,\r\n  nextMove: state.nextMove,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  setGameId: setGameIdAction,\r\n  setGameConfig: setGameConfigAction,\r\n  setActiveView: setActiveViewAction,\r\n  setIsHost: setIsHostAction,\r\n  flushData: flushDataAction,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PrePairingSetup);\r\n","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\data\\characters.js",["88"],"export default {\r\n  jurassic: {\r\n    dino1: {\r\n      label: 'Dino 1',\r\n      image: '',\r\n    },\r\n    dino2: {\r\n      label: 'Dino 2',\r\n      image: '',\r\n    },\r\n    dino3: {\r\n      label: 'Dino 3',\r\n      image: '',\r\n    },\r\n    dino4: {\r\n      label: 'Dino 4',\r\n      image: '',\r\n    },\r\n  },\r\n  princess: {\r\n    princess1: {\r\n      label: 'Princess 1',\r\n      image: '',\r\n    },\r\n    princess2: {\r\n      label: 'Princess 2',\r\n      image: '',\r\n    },\r\n    princess3: {\r\n      label: 'Princess 3',\r\n      image: '',\r\n    },\r\n    princess4: {\r\n      label: 'Princess 4',\r\n      image: '',\r\n    },\r\n  },\r\n};","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\data\\themes.js",["89","90"],"import characters from './characters';\r\n\r\nexport default {\r\n  jurassic: {\r\n    label: 'Jurassic',\r\n    characters: ['dino1', 'dino2', 'dino3', 'dino4'],\r\n  },\r\n  princess: {\r\n    label: 'Princess',\r\n    characters: ['princess1', 'princess2', 'princess3', 'princess4'],\r\n  },\r\n};\r\n\r\n","E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\views\\Game.jsx",["91","92"],"E:\\Marc\\Documents\\mim-games\\tictac\\app\\src\\views\\JoinGame.jsx",[],{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":1,"column":40,"nodeType":"99","messageId":"100","endLine":1,"endColumn":55},{"ruleId":"97","severity":1,"message":"101","line":85,"column":7,"nodeType":"99","messageId":"100","endLine":85,"endColumn":23},{"ruleId":"102","severity":1,"message":"103","line":15,"column":6,"nodeType":"104","endLine":15,"endColumn":8,"suggestions":"105"},{"ruleId":"97","severity":1,"message":"106","line":5,"column":3,"nodeType":"99","messageId":"100","endLine":5,"endColumn":21},{"ruleId":"97","severity":1,"message":"107","line":6,"column":3,"nodeType":"99","messageId":"100","endLine":6,"endColumn":25},{"ruleId":"97","severity":1,"message":"108","line":7,"column":3,"nodeType":"99","messageId":"100","endLine":7,"endColumn":21},{"ruleId":"97","severity":1,"message":"109","line":9,"column":32,"nodeType":"99","messageId":"100","endLine":9,"endColumn":39},{"ruleId":"110","severity":1,"message":"111","line":427,"column":3,"nodeType":"112","messageId":"113","endLine":427,"endColumn":4},{"ruleId":"110","severity":1,"message":"114","line":684,"column":3,"nodeType":"112","messageId":"113","endLine":684,"endColumn":4},{"ruleId":"93","replacedBy":"115"},{"ruleId":"95","replacedBy":"116"},{"ruleId":"97","severity":1,"message":"117","line":1,"column":17,"nodeType":"99","messageId":"100","endLine":1,"endColumn":25},{"ruleId":"102","severity":1,"message":"118","line":40,"column":6,"nodeType":"104","endLine":40,"endColumn":8,"suggestions":"119"},{"ruleId":"97","severity":1,"message":"120","line":11,"column":10,"nodeType":"99","messageId":"100","endLine":11,"endColumn":16},{"ruleId":"97","severity":1,"message":"109","line":12,"column":53,"nodeType":"99","messageId":"100","endLine":12,"endColumn":60},{"ruleId":"102","severity":1,"message":"121","line":67,"column":6,"nodeType":"104","endLine":67,"endColumn":57,"suggestions":"122"},{"ruleId":"123","severity":1,"message":"124","line":1,"column":1,"nodeType":"125","endLine":38,"endColumn":3},{"ruleId":"97","severity":1,"message":"126","line":1,"column":8,"nodeType":"99","messageId":"100","endLine":1,"endColumn":18},{"ruleId":"123","severity":1,"message":"124","line":3,"column":1,"nodeType":"125","endLine":12,"endColumn":3},{"ruleId":"97","severity":1,"message":"127","line":48,"column":10,"nodeType":"99","messageId":"100","endLine":48,"endColumn":21},{"ruleId":"97","severity":1,"message":"128","line":48,"column":23,"nodeType":"99","messageId":"100","endLine":48,"endColumn":37},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"no-unused-vars","'combineReducers' is defined but never used.","Identifier","unusedVar","'updateSoundTypes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'autoUpdateGameData'. Either include it or remove the dependency array.","ArrayExpression",["131"],"'setLevelTypeAction' is defined but never used.","'updateSoundTypesAction' is defined but never used.","'setFirstMoveAction' is defined but never used.","'shuffle' is defined but never used.","no-dupe-keys","Duplicate key 'n'.","ObjectExpression","unexpected","Duplicate key 'g'.",["129"],["130"],"'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'setActiveView'. Either include it or remove the dependency array. If 'setActiveView' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["132"],"'sounds' is defined but never used.","React Hook useEffect has missing dependencies: 'isHost' and 'setActiveView'. Either include them or remove the dependency array. If 'setActiveView' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["133"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'characters' is defined but never used.","'isModalOpen' is assigned a value but never used.","'setIsModalOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},"Update the dependencies array to be: [autoUpdateGameData]",{"range":"140","text":"141"},"Update the dependencies array to be: [setActiveView]",{"range":"142","text":"143"},"Update the dependencies array to be: [levelType, hostData, soundTypes, nextMove, rounds, isHost, setActiveView]",{"range":"144","text":"145"},[554,556],"[autoUpdateGameData]",[1215,1217],"[setActiveView]",[1617,1668],"[levelType, hostData, soundTypes, nextMove, rounds, isHost, setActiveView]"]